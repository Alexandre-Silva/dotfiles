" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2011 Apr 15
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
filetype off

set encoding=utf-8
let iCanHazVundle=1
" If vundle is not installed, do it first
if (!isdirectory(expand("$HOME/.vim/bundle/vundle")))
    echo "Installing Vundle.."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let iCanHazVundle=0
endif


set rtp+=~/.vim/bundle/vundle/
call vundle#begin()

Plugin 'gmarik/vundle'
Plugin 'Solarized'
Plugin 'ctrlp.vim'
Plugin 'bling/vim-airline'
Plugin 'bash-support.vim'
Plugin 'UltiSnips'
Plugin 'honza/vim-snippets'
Plugin 'surround.vim'
Plugin 'delimitMate.vim'
Plugin 'neocomplcache'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-sensible'
Plugin 'chriskempson/base16-vim'

Plugin 'kana/vim-textobj-user'              " lib of textobjs
Plugin 'kana/vim-textobj-lastpat'           " motion for selected text (search hilight)
Plugin 'bronson/vim-visual-star-search'     " * and # search for selected text in V-mode

Plugin 'zah/nim.vim'

if iCanHazVundle == 0
    echo "Installing Bundles, please ignore key map error messages"
    echo ""
    :BundleInstall
    :q
endif
" All of your Plugins must be added before the following line
call vundle#end()            " required



" this fixes the brackets blink cursors problem
" highlight MatchParen cterm=NONE ctermbg=black ctermfg=white

"================================================================================
"Confs
"===============================================================================

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands

set so=7
set laststatus=2                " Show status bar
set number                      " Show line numbers.
set completeopt=menuone,longest,preview
set hls                         " Highlight search matches.
set incsearch                   " find as you type search
set ignorecase                  " case insensitive search
set smartcase                   " case sensitive when uc present
set wildmenu                    " show list instead of just completing
set wildmode=list:longest,full  " command <Tab> completion, list matches, then longest common part, then all.
set foldenable                  " auto fold code
"set showmatch                   " show matching brackets/parenthesis
let loaded_matchparen = 1       " fix annoying brackets cursor blink jumping
set magic                       " For regular expressions turn magic on
set clipboard=unnamedplus       " Use X clipboard
set hidden
set nowrapscan                    " bot -> top when searching

" Enable filetype plugins filetype plugin on
filetype plugin on
filetype plugin indent on
filetype on

" Dictionary words
set dict+=/usr/share/dict/words

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf-8
" Use Unix as the standard file type,
" but if reading file is dos then continue using it
set ffs=unix,dos


"===============================================================================
" => Formating
"===============================================================================
set ai "Auto indent
set si "Smart indent
set wrap                      " wrap long lines
set shiftwidth=4                " use indents of 4 spaces
set tabstop=4                   " an indentation every four columnsvmap <C-c> "+yi
set expandtab                   " tabs are spaces, not tabs" copy and paste shortcuts.
set softtabstop=4               " let backspace delete indentvmap <C-x> "+c
set iskeyword+=-
set iskeyword+=_
"set list
"set listchars=tab:>.,trail:.,extends:#,nbsp:. " Highlight problematic whitespace
"set listchars=tab:▸\ ,eol:¬

"================================================================================
" Binds
"================================================================================
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis
endif

" Stupid shift key fixes
" cmap W w
" cmap WQ wq
" cmap wQ wq
" cmap Q q

" This way j/k move between display lines. While gj/gk operate on real lines
" noremap k gk
" noremap gk k
" noremap j gj
" noremap gj j

" For when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

" Navigate trough buffers. From Tim Pope’s unimpaired.vim
nnoremap <silent> [b :bprevious <CR>
nnoremap <silent> ]b :bnext <CR>
nnoremap <silent> [B :bfirst <CR>
nnoremap <silent> ]B :blast <CR>

" Navigate trough ctags.
nnoremap <silent> [t :cprevious <CR>
nnoremap <silent> ]t :cnext <CR>
nnoremap <silent> [T :cfirst <CR>
nnoremap <silent> ]T :clast <CR>

" Navigate trough tabs (t already used by ctags).
nnoremap <silent> [v :tabprevious <CR>
nnoremap <silent> ]v :tabnext <CR>
nnoremap <silent> [V :tabfirst <CR>
nnoremap <silent> ]V :tablast <CR>

" In ex mode go up/down in the hist with c-p c-n instead of up/down
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" alias %% equivalent to "pwd"
cnoremap <expr> %%  getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" smart disable of seaarch hilight
nnoremap <silent> <C-l> :<C-u> nohlsearch <CR><C-l>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Initdirs
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InitializeDirectories()
    let separator = "."
    let parent = $HOME
    let prefix = '.vim_tmp'
    let topdir = parent . '/' . prefix . '/'
    let dir_list = {
                \ 'backup': 'backupdir',
                \ 'views': 'viewdir',
                \ 'swap': 'directory',
                \ 'undo': 'undodir' }

    if exists("*mkdir")
        if !isdirectory(topdir)
            call mkdir(topdir)
        endif
    endif


    for [dirname, settingname] in items(dir_list)
        let directory = parent . '/' . prefix . '/' . dirname . "/"
        if exists("*mkdir")
            if !isdirectory(directory)
                call mkdir(directory)
            endif
        endif
        if !isdirectory(directory)
            echo "Warning: Unable to create backup directory: " . directory
            echo "Try: mkdir -p " . directory
        else
            let directory = substitute(directory, " ", "\\\\ ", "")
            exec "set " . settingname . "=" . directory
        endif
    endfor
endfunction
call InitializeDirectories()

"================================================================================
"Plugins
"================================================================================

" airline stuff
" let g:airline_theme="silver"
let g:airline#extensions#tabline#enabled = 0
let g:airline_powerline_fonts=1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'
let g:airline_symbols.readonly = 'R'

" CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" matlab plugin stuff
source $VIMRUNTIME/macros/matchit.vim
"filetype indent on
autocmd BufEnter *.m    compiler mlint
au FileType matlab set foldmethod=syntax foldcolumn=2 foldlevel=33
au FileType matlab map <buffer> <silent> <F5> :w<CR>:!matlab -nodesktop -nospalsh -r "try, run(which('%')), pause, end, quit" <CR>\\|<ESC><ESC>

" zah/nim.vim
fun! JumpToDef()
  if exists("*GotoDefinition_" . &filetype)
    call GotoDefinition_{&filetype}()
  else
    exe "norm! \<C-]>"
  endif
endf

" Jump to tag
nn <M-g> :call JumpToDef()<cr>
ino <M-g> <esc>:call JumpToDef()<cr>i


"================================================================================
"Colors / Theme
"================================================================================
set background=dark

set t_Co=256
let base16colorspace=256  " Access colors present in 256 colorspace
colorscheme base16-bright " base16-bright
if !has("gui_running")
  if has($TMUX)
    let g:gruvbox_italic=0
  endif
  hi Search cterm=NONe ctermfg=black ctermbg=blue " highlight/search colour
else
  hi Search guibg=peru guifg=wheat
endif

"================================================================================
" Local configs
"================================================================================
let $LOCALFILE=expand("~/.vimrc_local")
if filereadable($LOCALFILE)
    source $LOCALFILE
endif
